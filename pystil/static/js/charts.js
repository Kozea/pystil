// Generated by CoffeeScript 1.6.2
(function() {
  $(function() {
    var fetch, get_dates, load_embed, load_embed_maybe, make_url, requestIndex;

    requestIndex = 0;
    $('.datepicker').datepicker({
      dateFormat: 'yy-mm-dd',
      maxDate: new Date()
    });
    get_dates = function() {
      return $.datepicker.formatDate('yy-mm-dd', $("#from").datepicker("getDate")) + '/' + $.datepicker.formatDate('yy-mm-dd', $("#to").datepicker("getDate"));
    };
    make_url = function(url) {
      if (url.indexOf('/load') !== 0) {
        url = '/load' + url;
      }
      if (url.indexOf('/between') > -1) {
        url = url.split('/between')[0];
      }
      return url.replace('.svg', '') + '/between/' + get_dates() + '.svg';
    };
    $('form.from-to').on('submit', function() {
      $('embed').each(function() {
        var after_load, url;

        url = make_url($(this).attr('src'));
        after_load = function($old, $new) {
          return setTimeout((function() {
            $new.trigger('load');
            return setTimeout((function() {
              return load_embed_maybe($new);
            }), 100);
          }), 100);
        };
        return load_embed_maybe(this, url, after_load);
      });
      return false;
    });
    if ($('.datepicker').length) {
      $("#from").datepicker("setDate", '-1m');
      $("#to").datepicker("setDate", new Date());
    }
    $('#filter').keyup(function(e) {
      var $results, $this, val, xhr;

      $this = $(this);
      $results = $('section.results');
      val = $this.val().trim();
      if (!val) {
        val = '%';
      }
      $results.addClass('loading');
      if (xhr) {
        xhr.abort;
      }
      return xhr = $.ajax({
        url: "/sites/" + val,
        dataType: "text",
        rqIndex: ++requestIndex,
        success: function(data) {
          $results.removeClass('loading');
          if (this.rqIndex === requestIndex) {
            return $results.html(data);
          }
        },
        error: function() {
          if (this.rqIndex === requestIndex) {
            return $results.html("");
          }
        }
      });
    });
    load_embed_maybe = function(embed, url, callback) {
      var $new;

      if (url == null) {
        url = null;
      }
      if (callback == null) {
        callback = null;
      }
      if ($(embed).closest('figure').data('loading')) {
        setTimeout((function() {
          return load_embed_maybe(embed, url, callback);
        }), 250);
        return;
      }
      $new = load_embed(embed, url);
      if (callback) {
        return callback($(embed), $new);
      }
    };
    load_embed = function(embed, url) {
      var $figure, $loading, $new;

      if (url == null) {
        url = null;
      }
      $loading = $(embed);
      url = url || make_url($loading.attr('src')).replace('/load', '');
      $figure = $loading.closest('figure');
      $figure.data('loading', true);
      if (!$figure.attr('style')) {
        $figure.width($loading.width()).height($loading.height()).css({
          overflow: 'hidden'
        });
      }
      $figure.append($new = $('<embed>', {
        type: 'image/svg+xml',
        src: url
      }).on('load', function() {
        $(this).prev().remove();
        return $(this).closest('figure').data('loading', false);
      }));
      return $new;
    };
    $('embed[src^="/load"]').on('load', function() {
      return load_embed(this);
    });
    $(window).bind('popstate', function(event) {
      if (event.originalEvent.state && event.originalEvent.state.page) {
        return fetch(event.originalEvent.state.page, document.location.href, true);
      }
    });
    fetch = function(page, url, popping) {
      return $('#container').load(url, {
        xhr: true
      }, function() {
        $('embed[src^="/load"]').on('load', function() {
          return load_embed(this);
        });
        $('nav.xhr a').removeClass('active');
        $('nav.xhr a[data-page=' + page + ']').addClass('active');
        if (!popping) {
          return history && history.pushState && history.pushState({
            page: page
          }, null, url);
        }
      });
    };
    $('nav.xhr a').click(function() {
      var page, url;

      page = $(this).attr('data-page');
      url = $(this).attr('href');
      fetch(page, url);
      return false;
    });
    if ($('nav.xhr a.active').size()) {
      return history && history.pushState && history.pushState({
        page: $('nav.xhr a.active').attr('data-page')
      }, null, document.location.href);
    }
  });

}).call(this);

/*
//@ sourceMappingURL=charts.map
*/
